In Java, the `Map` interface represents a collection of key-value pairs, where each key maps to a single value. It's a part of the Java Collections Framework and is found in the `java.util` package. The `Map` interface is not a subtype of the `Collection` interface.

Here are some commonly used implementations of the `Map` interface:

1. `HashMap`: It stores the key-value pairs in a hash table. It allows null values and null keys. It does not maintain any order.
2. `LinkedHashMap`: It extends `HashMap` and maintains a doubly-linked list running through all of its entries. This linked list defines the iteration ordering, which is normally the order in which keys were inserted into the map (insertion-order).
3. `TreeMap`: It implements `NavigableMap` and is based on a Red-Black tree. It sorts the map according to the natural ordering of its keys, or by a comparator provided at map creation time.
4. `Hashtable`: It's similar to `HashMap` but is synchronized and does not allow null keys or values.

Here's an example of how to use a `HashMap` in Java:

```java
import java.util.HashMap;
import java.util.Map;

public class MapExample {
    public static void main(String[] args) {
        // Creating a HashMap
        Map<String, Integer> map = new HashMap<>();

        // Adding key-value pairs to the map
        map.put("Alice", 30);
        map.put("Bob", 25);
        map.put("Charlie", 35);

        // Accessing a value
        int age = map.get("Alice");
        System.out.println("Alice's age: " + age);

        // Iterating over the map
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }

        // Checking if a key exists
        if (map.containsKey("Bob")) {
            System.out.println("Map contains key 'Bob'");
        }

        // Checking if a value exists
        if (map.containsValue(25)) {
            System.out.println("Map contains value 25");
        }

        // Removing a key-value pair
        map.remove("Charlie");

        // Size of the map
        System.out.println("Size of the map: " + map.size());
    }
}
```

In this example:
- We create a `HashMap` with `String` keys and `Integer` values.
- We add some key-value pairs to the map using the `put` method.
- We retrieve a value using the `get` method.
- We iterate over the map using a `for-each` loop and the `entrySet` method.
- We check for the existence of a key using the `containsKey` method.
- We check for the existence of a value using the `containsValue` method.
- We remove a key-value pair using the `remove` method.
- We get the size of the map using the `size` method.

Other useful methods include:
- `isEmpty()`: Checks if the map is empty.
- `clear()`: Removes all key-value pairs from the map.
- `keySet()`: Returns a set view of the keys contained in the map.
- `values()`: Returns a collection view of the values contained in the map.
- `putAll(Map<? extends K,? extends V> m)`: Copies all of the mappings from the specified map to this map.

Each `Map` implementation has its own performance characteristics and should be chosen based on the specific requirements of your application.