DELIMITER $$
CREATE PROCEDURE fetch_actors()
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE actor_id INT;
    DECLARE first_name VARCHAR(45);
    DECLARE last_name VARCHAR(45);

    -- Declare a cursor to select actor_id, first_name, and last_name from the actor table
    DECLARE actor_cursor CURSOR FOR
        SELECT actor_id, first_name, last_name
        FROM actor;

    -- Declare a NOT FOUND handler to set done to TRUE
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    -- Open the cursor
    OPEN actor_cursor;

    -- Loop through the rows in the cursor
    read_loop: LOOP
        -- Fetch the next row into variables
        FETCH actor_cursor INTO actor_id, first_name, last_name;

        -- Exit the loop if there are no more rows
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Do something with the fetched data
        SELECT CONCAT('Actor ID: ', actor_id, ', Name: ', first_name, ' ', last_name) AS actor_info;
    END LOOP;

    -- Close the cursor
    CLOSE actor_cursor;
END$$

DELIMITER ;


DELIMITER //

CREATE PROCEDURE ListEmployees()
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE emp_id INT;
    DECLARE emp_name VARCHAR(100);
    DECLARE emp_position VARCHAR(100);
    
    -- Declare cursor for the employee list
    DECLARE employee_cursor CURSOR FOR
    SELECT id, name, position FROM employees;
    
    -- Declare handler for end of data
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    -- Open the cursor
    OPEN employee_cursor;
    
    -- Fetch the first row
    FETCH employee_cursor INTO emp_id, emp_name, emp_position;
    
    -- While loop to iterate through the result set
    WHILE NOT done DO
        -- Process each row
        SELECT emp_id, emp_name, emp_position;
        
        -- Fetch the next row
        FETCH employee_cursor INTO emp_id, emp_name, emp_position;
    END WHILE;
    
    -- Close the cursor
    CLOSE employee_cursor;
END //

DELIMITER ;
