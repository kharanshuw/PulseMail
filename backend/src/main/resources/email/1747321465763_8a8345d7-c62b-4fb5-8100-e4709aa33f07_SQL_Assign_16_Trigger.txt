1. **Inventory Stock Alert**:
   - **Problem Statement**: Whenever a new rental is created, check the inventory quantity for the rented film. If the quantity falls below a certain threshold (e.g., 5 copies), log a warning message in a `low_stock_alerts` table.
   - **Trigger Description**: Create an `AFTER INSERT` trigger on the `rental` table that updates the inventory count for the rented film and inserts a row into the `low_stock_alerts` table if the count is below the threshold.

2. **Prevent Deletion of Active Customers**:
   - **Problem Statement**: Prevent the deletion of a customer who has any active rentals.
   - **Trigger Description**: Create a `BEFORE DELETE` trigger on the `customer` table that checks for active rentals. If active rentals exist, raise an error and prevent the deletion.

3. **Update Last Updated Timestamp**:
   - **Problem Statement**: Automatically update the `last_update` timestamp column in the `film` table whenever a film's details are modified.
   - **Trigger Description**: Create a `BEFORE UPDATE` trigger on the `film` table that sets the `last_update` column to the current timestamp.

4. **Log Film Deletion**:
   - **Problem Statement**: Log details of any film deletions into a `deleted_films_log` table for auditing purposes.
   - **Trigger Description**: Create an `AFTER DELETE` trigger on the `film` table that inserts the deleted film's details into the `deleted_films_log` table.

5. **Ensure Valid Rental Dates**:
   - **Problem Statement**: Ensure that the `return_date` in the `rental` table is always after the `rental_date`.
   - **Trigger Description**: Create a `BEFORE INSERT` or `BEFORE UPDATE` trigger on the `rental` table that checks if the `return_date` is after the `rental_date`. If not, raise an error to prevent the insert or update.

